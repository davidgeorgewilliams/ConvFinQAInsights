# Import necessary modules and libraries
import os
import openai
import requests
from helpers import *

# Set up OpenAI credentials
openai.organization = os.environ['openai_organization']
openai.api_key = os.environ['openai_api_key']


def make_post_request(request_url, headers, request_data):
    """
    Makes a POST request to the specified URL with the given headers and request data.

    Args:
    - request_url (str): The URL to which the POST request will be made.
    - headers (dict): The headers to be included in the request.
    - request_data (dict): The data to be sent in the request.

    Returns:
    - response: The response object returned by the POST request.
    """
    return requests.post(request_url,
                         data=json.dumps(request_data, ensure_ascii=True),
                         headers=headers)


def get_response(message: str):
    """
    Retrieves a response from OpenAI's GPT-4 model for the given message.

    Args:
    - message (str): The input message for which a response is desired.

    Returns:
    - response (dict): The response generated by the GPT-4 model.
    """
    message = message[:15000]  # Limit the message length to 15000 characters
    response = make_post_request("https://api.openai.com/v1/chat/completions", {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {openai.api_key}"
    }, {
                                     "model": "gpt-4",
                                     "messages": [{"role": "user", "content": f"{message}"}],
                                     "temperature": 0.9
                                 })
    return json.loads(response.content)


enriched_data = dict()

# Check if the file containing enriched data from OpenAI exists
if os.path.isfile("data/finqa_data_enriched_openai.json"):
    # If it exists, read the data from the file and create a backup file
    with open("data/finqa_data_enriched_openai.json", encoding="utf-8") as f_in:
        with open("data/finqa_data_enriched_openai_backup.json", "w", encoding="utf-8") as f_out:
            # Iterate through each line in the input file
            for line in f_in:
                # Deserialize the JSON data from the line
                data = from_json(line)
                # Create a key for the data instance
                key = create_instance_key(data)
                # Store the data in the enriched_data dictionary using the key
                enriched_data[key] = data
                # Write the data to the backup file
                f_out.write(to_json(data) + "\n")

line_count = 0

# Open the input file containing original data
with open("data/finqa_data.json", encoding="utf-8") as f_in:
    # Open a new file to store enriched data from OpenAI
    with open("data/finqa_data_enriched_openai.json", "w", encoding="utf-8") as f_out:
        # Iterate through each line in the input file
        for line in f_in:
            # Deserialize the JSON data from the line
            data = from_json(line)
            # Create a key for the data instance
            key = create_instance_key(data)
            # Print the line count and key for tracking progress
            print(f"{line_count} {key}")
            # Increment the line count
            line_count += 1
            # Check if the data instance is already enriched
            if key in enriched_data:
                # If enriched data exists, write it to the output file and continue to the next line
                f_out.write(to_json(enriched_data[key]) + "\n")
                f_out.flush()
                continue
            # If data is not enriched, generate a response using OpenAI
            body = create_message_body(data)
            data["response"] = get_response(body)["choices"][0]["message"]["content"].strip()
            # Write the enriched data to the output file
            f_out.write(to_json(data) + "\n")
            f_out.flush()

# Check if the backup file for enriched data exists
if os.path.isfile("data/finqa_data_enriched_openai_backup.json"):
    # If the backup file exists, remove it
    os.remove("data/finqa_data_enriched_openai_backup.json")
